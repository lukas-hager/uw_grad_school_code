)
set.seed(2022)
x <- 0
bind_rows(
lapply(c(1:5000),function(i){
if(i == 1){
return(c('i_t' = 0, 'x_t' = x))
}else{
i_t <- rbinom(1, 1, prob = v_final$p[x+1])
if(i_t == 1){
x <<-0
}else{
lambda <- rbinom(1, 1, prob = .8)
x <<- x + lambda
}
return(c('i_t' = i_t, 'x_t' = x))
}
})
)
bind_rows(
lapply(c(1:5000),function(i){
if(i == 1){
return(c('i_t' = 0, 'x_t' = x))
}else{
i_t <- rbinom(1, 1, prob = v_final$p[x+1])
if(i_t == 1){
x <<-0
}else{
lambda <- rbinom(1, 1, prob = .8)
x <<- x + lambda
}
return(c('i_t' = i_t, 'x_t' = x))
}
})
) %>%
View()
set.seed(2022)
x <- 0
sims <- bind_rows(
lapply(c(1:5000),function(i){
if(i == 1){
return(c('i_t' = 0, 'x_t' = x))
}else{
i_t <- rbinom(1, 1, prob = v_final$p[x+1])
if(i_t == 1){
x <<-0
}else{
lambda <- rbinom(1, 1, prob = .8)
print(lambda)
x <<- x + lambda
}
return(c('i_t' = i_t, 'x_t' = x))
}
})
)
set.seed(2022)
x <- 0
sims <- bind_rows(
lapply(c(1:5000),function(i){
if(i == 1){
return(c('i_t' = 0, 'x_t' = x))
}else{
i_t <- rbinom(1, 1, prob = v_final$p[x+1])
if(i_t == 1){
x <<-0
}
lambda <- rbinom(1, 1, prob = .8)
x <<- x + lambda
return(c('i_t' = i_t, 'x_t' = x))
}
})
)
sims
set.seed(2022)
x <- 0
sims <- bind_rows(
lapply(c(1:5000),function(i){
if(i == 1){
return(c('i_t' = 0, 'x_t' = x))
}else{
i_t <- rbinom(1, 1, prob = v_final %>%
pull(p) %>%
slice(x+1))
if(i_t == 1){
x <<-0
}
lambda <- rbinom(1, 1, prob = .8)
x <<- x + lambda
return(c('i_t' = i_t, 'x_t' = x))
}
})
)
set.seed(2022)
x <- 0
sims <- bind_rows(
lapply(c(1:5000),function(i){
if(i == 1){
return(c('i_t' = 0, 'x_t' = x))
}else{
i_t <- rbinom(1, 1, prob = v_final %>%
slice(x+1) %>%
pull(p))
if(i_t == 1){
x <<-0
}
lambda <- rbinom(1, 1, prob = .8)
x <<- x + lambda
return(c('i_t' = i_t, 'x_t' = x))
}
})
)
sims
set.seed(2022)
x <- 0
sims <- bind_rows(
lapply(c(1:5000),function(i){
if(i == 1){
return(c('i_t' = 0, 'x_t' = x))
}else{
i_t <- rbinom(1, 1, prob = v_final %>%
slice(x+1) %>%
pull(p))
if(i_t == 1){
x <<-0
}
lambda <- rbinom(1, 1, prob = .8)
x <<- x + lambda
return(c('i_t' = i_t, 'x_t' = x))
}
})
)
sims
sims %>%
filter(x_t != 10) %>%
mutate(val = (1-i_t) * (x_t - lag(x_t)) + i_t * x_t)
lambda_hat <- sims %>%
filter(x_t != 10) %>%
mutate(val = (1-i_t) * (x_t - lag(x_t)) + i_t * x_t) %>%
summarise(lambda_hat = mean(val, na.rm = TRUE)) %>%
pull(lambda_hat)
lambda_hat
solve_dp <- function(t1, t2, t3){
mu = .5772
converged <- FALSE
converge = 10^-5
v_old <- data.table('x_t' = c(0:10),
'v_0' = rep(0,11),
'v_1' = rep(0,11))
while(converged == FALSE){
P_xt <- v_old %>%
mutate(p = 1 / (exp(v_0-v_1) + 1)) %>%
pull(p)
e1 <- mu - log(P_xt)
e0 <- mu - log(1-P_xt)
Pi <- P_xt * (-t3 + e1) + (1-P_xt) * (-t1 * c(0:10) -t2 * c(0:10) + e0)
G_0 <- matrix(sapply(c(0:10),
function(x){if(x != 10){
c(rep(0,x), .2, .8, rep(0, max(0,9-x)))
}else{
c(rep(0,10), 1)
}}),
nrow = 11,
ncol = 11,
byrow = TRUE)
G_1 <- matrix(rep(c(.2, .8, rep(0, 9)), 11),
nrow = 11,
ncol = 11,
byrow = TRUE)
G <- diag(P_xt) %*% G_1 + diag(1-P_xt) %*% G_0
V <- solve(diag(11) - beta * G) %*% Pi
V_0 <- -theta1 * c(0:10) + beta * G_0 %*% V
V_1 <- -theta3 + beta * G_1 %*% V
v_new <- data.table('x_t' = c(0:10),
'v_0' = as.numeric(V_0),
'v_1' = as.numeric(V_1))
converge_dist <- v_new %>%
left_join(v_old,
by = 'x_t') %>%
mutate(diff = pmax(abs(v_1.x-v_1.y), abs(v_0.x-v_0.y))) %>%
pull(diff) %>%
max()
v_old <<- v_new
print(str_interp('Convergence distance: ${converge_dist}'))
if(converge_dist < converge){
converged <<- TRUE
v_final <- v_new %>%
mutate(p = exp(v_1) / (exp(v_0) + exp(v_1)))
}
}
return(v_final)
}
solve_dp(.3, 0, 4)
solve_dp <- function(t1, t2, t3){
mu = .5772
converged <- FALSE
converge = 10^-5
v_old <- data.table('x_t' = c(0:10),
'v_0' = rep(0,11),
'v_1' = rep(0,11))
while(converged == FALSE){
P_xt <- v_old %>%
mutate(p = 1 / (exp(v_0-v_1) + 1)) %>%
pull(p)
e1 <- mu - log(P_xt)
e0 <- mu - log(1-P_xt)
Pi <- P_xt * (-t3 + e1) + (1-P_xt) * (-t1 * c(0:10) -t2 * c(0:10) + e0)
G_0 <- matrix(sapply(c(0:10),
function(x){if(x != 10){
c(rep(0,x), .2, .8, rep(0, max(0,9-x)))
}else{
c(rep(0,10), 1)
}}),
nrow = 11,
ncol = 11,
byrow = TRUE)
G_1 <- matrix(rep(c(.2, .8, rep(0, 9)), 11),
nrow = 11,
ncol = 11,
byrow = TRUE)
G <- diag(P_xt) %*% G_1 + diag(1-P_xt) %*% G_0
V <- solve(diag(11) - beta * G) %*% Pi
V_0 <- -theta1 * c(0:10) + beta * G_0 %*% V
V_1 <- -theta3 + beta * G_1 %*% V
v_new <- data.table('x_t' = c(0:10),
'v_0' = as.numeric(V_0),
'v_1' = as.numeric(V_1))
converge_dist <- v_new %>%
left_join(v_old,
by = 'x_t') %>%
mutate(diff = pmax(abs(v_1.x-v_1.y), abs(v_0.x-v_0.y))) %>%
pull(diff) %>%
max()
v_old <- v_new
print(str_interp('Convergence distance: ${converge_dist}'))
if(converge_dist < converge){
converged <<- TRUE
v_final <- v_new %>%
mutate(p = exp(v_1) / (exp(v_0) + exp(v_1)))
}
}
return(v_final)
}
solve_dp(.3, 0, 4)
solve_dp <- function(t1, t2, t3){
mu = .5772
converged <- FALSE
converge = 10^-5
v_old <- data.table('x_t' = c(0:10),
'v_0' = rep(0,11),
'v_1' = rep(0,11))
while(converged == FALSE){
P_xt <- v_old %>%
mutate(p = 1 / (exp(v_0-v_1) + 1)) %>%
pull(p)
e1 <- mu - log(P_xt)
e0 <- mu - log(1-P_xt)
Pi <- P_xt * (-t3 + e1) + (1-P_xt) * (-t1 * c(0:10) -t2 * c(0:10) + e0)
G_0 <- matrix(sapply(c(0:10),
function(x){if(x != 10){
c(rep(0,x), .2, .8, rep(0, max(0,9-x)))
}else{
c(rep(0,10), 1)
}}),
nrow = 11,
ncol = 11,
byrow = TRUE)
G_1 <- matrix(rep(c(.2, .8, rep(0, 9)), 11),
nrow = 11,
ncol = 11,
byrow = TRUE)
G <- diag(P_xt) %*% G_1 + diag(1-P_xt) %*% G_0
V <- solve(diag(11) - beta * G) %*% Pi
V_0 <- -theta1 * c(0:10) + beta * G_0 %*% V
V_1 <- -theta3 + beta * G_1 %*% V
v_new <- data.table('x_t' = c(0:10),
'v_0' = as.numeric(V_0),
'v_1' = as.numeric(V_1))
converge_dist <- v_new %>%
left_join(v_old,
by = 'x_t') %>%
mutate(diff = pmax(abs(v_1.x-v_1.y), abs(v_0.x-v_0.y))) %>%
pull(diff) %>%
max()
v_old <- v_new
print(str_interp('Convergence distance: ${converge_dist}'))
if(converge_dist < converge){
converged <- TRUE
v_final <- v_new %>%
mutate(p = exp(v_1) / (exp(v_0) + exp(v_1)))
}
}
return(v_final)
}
solve_dp(.3, 0, 4)
solve_dp <- function(t1, t2, t3){
mu = .5772
converged <- FALSE
converge = 10^-5
v_old <- data.table('x_t' = c(0:10),
'v_0' = rep(0,11),
'v_1' = rep(0,11))
while(converged == FALSE){
P_xt <- v_old %>%
mutate(p = 1 / (exp(v_0-v_1) + 1)) %>%
pull(p)
e1 <- mu - log(P_xt)
e0 <- mu - log(1-P_xt)
Pi <- P_xt * (-t3 + e1) + (1-P_xt) * (-t1 * c(0:10) -t2 * c(0:10) + e0)
G_0 <- matrix(sapply(c(0:10),
function(x){if(x != 10){
c(rep(0,x), .2, .8, rep(0, max(0,9-x)))
}else{
c(rep(0,10), 1)
}}),
nrow = 11,
ncol = 11,
byrow = TRUE)
G_1 <- matrix(rep(c(.2, .8, rep(0, 9)), 11),
nrow = 11,
ncol = 11,
byrow = TRUE)
G <- diag(P_xt) %*% G_1 + diag(1-P_xt) %*% G_0
V <- solve(diag(11) - beta * G) %*% Pi
V_0 <- -theta1 * c(0:10) + beta * G_0 %*% V
V_1 <- -theta3 + beta * G_1 %*% V
v_new <- data.table('x_t' = c(0:10),
'v_0' = as.numeric(V_0),
'v_1' = as.numeric(V_1))
converge_dist <- v_new %>%
left_join(v_old,
by = 'x_t') %>%
mutate(diff = pmax(abs(v_1.x-v_1.y), abs(v_0.x-v_0.y))) %>%
pull(diff) %>%
max()
v_old <- v_new
if(converge_dist < converge){
converged <- TRUE
v_final <- v_new %>%
mutate(p = exp(v_1) / (exp(v_0) + exp(v_1)))
}
}
return(v_final)
}
solve_dp(.3, 0, 4)
probs <- solve_dp(.3, 0, 4)
sims %>%
left_join(probs %>%
select(x_t, p),
by = 'x_t')
sims %>%
left_join(probs %>%
select(x_t, p),
by = 'x_t') %>%
mutate(event_prob = (1-i_t) * (1-p) + i_t * p)
set.seed(2022)
x <- 0
sims <- bind_rows(
lapply(c(1:5000),function(i){
if(i == 1){
return(c('i_t' = 0, 'x_t' = x))
}else{
i_t <- rbinom(1, 1, prob = v_final %>%
slice(x+1) %>%
pull(p))
if(i_t == 1){
x <<-0
}else{
lambda <- rbinom(1, 1, prob = .8)
x <<- x + lambda
}
return(c('i_t' = i_t, 'x_t' = x))
}
})
)
sims
set.seed(2022)
x <- 0
sims <- bind_rows(
lapply(c(1:5000),function(i){
if(i == 1){
x_old <<- x
return(c('i_t' = 0, 'x_t' = x))
}else{
lambda <- rbinom(1, 1, prob = .8)
x_new <- x_old + lambda
i_t <- rbinom(1, 1, prob = v_final %>%
slice(x+1) %>%
pull(p))
if(i_t == 1){
x_old <<- 0
}else{
x_old <<- x_new
}
return(c('i_t' = i_t, 'x_t' = x))
}
})
)
sims
set.seed(2022)
x <- 0
sims <- bind_rows(
lapply(c(1:5000),function(i){
if(i == 1){
x_old <<- x
return(c('i_t' = 0, 'x_t' = x))
}else{
lambda <- rbinom(1, 1, prob = .8)
x_new <- x_old + lambda
i_t <- rbinom(1, 1, prob = v_final %>%
slice(x+1) %>%
pull(p))
if(i_t == 1){
x_old <<- 0
}else{
x_old <<- x_new
}
return(c('i_t' = i_t, 'x_t' = x_new))
}
})
)
sims
View(sims)
set.seed(2022)
x <- 0
sims <- bind_rows(
lapply(c(1:5000),function(i){
if(i == 1){
x_old <<- x
return(c('i_t' = 0, 'x_t' = x))
}else{
lambda <- rbinom(1, 1, prob = .8)
x_new <- min(x_old + lambda, 10)
i_t <- rbinom(1, 1, prob = v_final %>%
slice(x+1) %>%
pull(p))
if(i_t == 1){
x_old <<- 0
}else{
x_old <<- x_new
}
return(c('i_t' = i_t, 'x_t' = x_new))
}
})
)
View(sims)
set.seed(2022)
x <- 0
sims <- bind_rows(
lapply(c(1:5000),function(i){
if(i == 1){
x_old <<- x
return(c('i_t' = 0, 'x_t' = x))
}else{
lambda <- rbinom(1, 1, prob = .8)
x_new <- min(x_old + lambda, 10)
i_t <- rbinom(1, 1, prob = v_final %>%
slice(x_new+1) %>%
pull(p))
if(i_t == 1){
x_old <<- 0
}else{
x_old <<- x_new
}
return(c('i_t' = i_t, 'x_t' = x_new))
}
})
)
View(sims)
sims %>%
filter(x_t != 10, i_t != 1) %>%
mutate(val = (1-i_t) * (x_t - lag(x_t)) + lag(i_t) * x_t)
sims %>%
filter(x_t != 10) %>%
mutate(val = (1-i_t) * (x_t - lag(x_t)) + lag(i_t) * x_t)
sims %>%
filter(x_t != 10) %>%
mutate(val = (1-lag(i_t)) * (x_t - lag(x_t)) + lag(i_t) * x_t)
sims %>%
filter(x_t != 10) %>%
mutate(val = (1-lag(i_t)) * (x_t - lag(x_t)) + lag(i_t) * x_t) %>% View()
lambda_hat <- sims %>%
filter(x_t != 10) %>%
mutate(val = (1-lag(i_t)) * (x_t - lag(x_t)) + lag(i_t) * x_t) %>%
summarise(lambda_hat = mean(val, na.rm = TRUE)) %>%
pull(lambda_hat)
lambda_hat
probs <- solve_dp(.3, 0, 4)
sims %>%
left_join(probs %>%
select(x_t, p),
by = 'x_t') %>%
mutate(event_prob = (1-i_t) * (1-p) + i_t * p)
likelihood <- sims %>%
left_join(probs %>%
select(x_t, p),
by = 'x_t') %>%
mutate(event_prob = (1-i_t) * (1-p) + i_t * p) %>%
summarise(prob = prod(event_prod, na.rm = TRUE))
likelihood <- sims %>%
left_join(probs %>%
select(x_t, p),
by = 'x_t') %>%
mutate(event_prob = (1-i_t) * (1-p) + i_t * p) %>%
summarise(prob = prod(event_prob, na.rm = TRUE))
likelihood
likelihood <- sims %>%
left_join(probs %>%
select(x_t, p),
by = 'x_t') %>%
mutate(event_prob = (1-i_t) * (1-p) + i_t * p) %>%
summarise(prob = sum(log(event_prob), na.rm = TRUE))
likelihood
